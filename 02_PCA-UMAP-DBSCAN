#!/usr/bin/env python3


import pandas as pd
import umap
from sklearn.cluster import DBSCAN
import numpy as np

# Read the PCA results
pca_df = pd.read_csv("plink.eigenvec", delim_whitespace=True, header=None)
pca_df.columns = ['FID', 'IID'] + [f'PC{i+1}' for i in range(pca_df.shape[1]-2)]
pca_data = pca_df.iloc[:, 2:]  # Extracting the PCA components only

#UMAP projection
reducer = umap.UMAP()
embedding_umap = reducer.fit_transform(pca_data)

# Set parameters for DBSCAN
eps = 0.068
min_samples = 3

# Define a function to get sorted clusters based on centroids
def get_sorted_clusters(embedding, labels):
    unique_labels = np.unique(labels)
    centroids = []
    for label in unique_labels:
        if label == -1:  # Exclude noise for DBSCAN
            continue
        members = embedding[labels == label]
        centroid = np.mean(members, axis=0)
        centroids.append((label, centroid))
    centroids.sort(key=lambda x: tuple(x[1]))
    sorted_labels = [label for label, _ in centroids]
    return sorted_labels

# Perform DBSCAN clustering
dbscan = DBSCAN(eps=eps, min_samples=min_samples)
clusters = dbscan.fit(embedding_umap).labels_

